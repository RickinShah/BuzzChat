// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tokens.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteAllTokens = `-- name: DeleteAllTokens :exec
DELETE FROM tokens
WHERE scope = $1 AND user_id = $2
`

type DeleteAllTokensParams struct {
	Scope  string
	UserID int64
}

func (q *Queries) DeleteAllTokens(ctx context.Context, arg DeleteAllTokensParams) error {
	_, err := q.db.Exec(ctx, deleteAllTokens, arg.Scope, arg.UserID)
	return err
}

const getUserByToken = `-- name: GetUserByToken :one
SELECT u.user_pid, u.username, u.email, u.name, u.password_hash, u.bio, u.activated, u.profile_pic,
       u.created_at, u.updated_at, u.version
FROM users u
INNER JOIN tokens t ON u.user_pid = t.user_id
WHERE t.hash = $1
  AND t.scope = $2
  AND t.expiry > $3
`

type GetUserByTokenParams struct {
	Hash   []byte
	Scope  string
	Expiry pgtype.Timestamptz
}

func (q *Queries) GetUserByToken(ctx context.Context, arg GetUserByTokenParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByToken, arg.Hash, arg.Scope, arg.Expiry)
	var i User
	err := row.Scan(
		&i.UserPid,
		&i.Username,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.Bio,
		&i.Activated,
		&i.ProfilePic,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const insertToken = `-- name: InsertToken :exec
INSERT INTO tokens (Hash, user_id, expiry, scope)
VALUES ($1, $2, $3, $4)
`

type InsertTokenParams struct {
	Hash   []byte
	UserID int64
	Expiry pgtype.Timestamptz
	Scope  string
}

func (q *Queries) InsertToken(ctx context.Context, arg InsertTokenParams) error {
	_, err := q.db.Exec(ctx, insertToken,
		arg.Hash,
		arg.UserID,
		arg.Expiry,
		arg.Scope,
	)
	return err
}
