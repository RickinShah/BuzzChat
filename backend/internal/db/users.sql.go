// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_pid = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userPid int64) error {
	_, err := q.db.Exec(ctx, deleteUser, userPid)
	return err
}

const getUser = `-- name: GetUser :one
SELECT
    user_pid,
    username,
    email,
    name,
    password_hash,
    bio,
    activated,
    profile_pic,
    created_at,
    updated_at,
    version
FROM
    users
WHERE
    user_pid = $1
`

func (q *Queries) GetUser(ctx context.Context, userPid int64) (User, error) {
	row := q.db.QueryRow(ctx, getUser, userPid)
	var i User
	err := row.Scan(
		&i.UserPid,
		&i.Username,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.Bio,
		&i.Activated,
		&i.ProfilePic,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
    user_pid,
    username,
    email,
    name,
    password_hash,
    bio,
    activated,
    profile_pic,
    created_at,
    updated_at,
    version
FROM
    users
WHERE
    email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserPid,
		&i.Username,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.Bio,
		&i.Activated,
		&i.ProfilePic,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const getUserByEmailOrUsername = `-- name: GetUserByEmailOrUsername :one
SELECT
    user_pid,
    username,
    email,
    name,
    password_hash,
    bio,
    activated,
    profile_pic,
    created_at,
    updated_at,
    version
FROM
    users
WHERE
    email = $1
    OR username = $1
`

func (q *Queries) GetUserByEmailOrUsername(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmailOrUsername, email)
	var i User
	err := row.Scan(
		&i.UserPid,
		&i.Username,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.Bio,
		&i.Activated,
		&i.ProfilePic,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT
    user_pid,
    username,
    email,
    name,
    password_hash,
    bio,
    activated,
    profile_pic,
    created_at,
    updated_at,
    version
FROM
    users
WHERE
    username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.UserPid,
		&i.Username,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.Bio,
		&i.Activated,
		&i.ProfilePic,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (username, email, name, password_hash, bio, profile_pic)
    VALUES ($1, $2, $3, $4, $5, $6)
RETURNING
    user_pid, created_at, updated_at, version
`

type InsertUserParams struct {
	Username     string
	Email        string
	Name         pgtype.Text
	PasswordHash []byte
	Bio          pgtype.Text
	ProfilePic   pgtype.Text
}

type InsertUserRow struct {
	UserPid   int64
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	Version   int32
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (InsertUserRow, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.Username,
		arg.Email,
		arg.Name,
		arg.PasswordHash,
		arg.Bio,
		arg.ProfilePic,
	)
	var i InsertUserRow
	err := row.Scan(
		&i.UserPid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :one
UPDATE
    users
SET
    password_hash = $3,
    updated_at = now(),
    version = version + 1
WHERE
    user_pid = $1
    AND version = $2
RETURNING
    updated_at,
    version
`

type UpdatePasswordParams struct {
	UserPid      int64
	Version      int32
	PasswordHash []byte
}

type UpdatePasswordRow struct {
	UpdatedAt pgtype.Timestamptz
	Version   int32
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (UpdatePasswordRow, error) {
	row := q.db.QueryRow(ctx, updatePassword, arg.UserPid, arg.Version, arg.PasswordHash)
	var i UpdatePasswordRow
	err := row.Scan(&i.UpdatedAt, &i.Version)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE
    users
SET
    username = $3,
    email = $4,
    name = $5,
    bio = $6,
    activated = $7,
    profile_pic = $8,
    updated_at = now(),
    version = version + 1
WHERE
    user_pid = $1
    AND version = $2
RETURNING
    updated_at,
    version
`

type UpdateUserParams struct {
	UserPid    int64
	Version    int32
	Username   string
	Email      string
	Name       pgtype.Text
	Bio        pgtype.Text
	Activated  bool
	ProfilePic pgtype.Text
}

type UpdateUserRow struct {
	UpdatedAt pgtype.Timestamptz
	Version   int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.UserPid,
		arg.Version,
		arg.Username,
		arg.Email,
		arg.Name,
		arg.Bio,
		arg.Activated,
		arg.ProfilePic,
	)
	var i UpdateUserRow
	err := row.Scan(&i.UpdatedAt, &i.Version)
	return i, err
}
